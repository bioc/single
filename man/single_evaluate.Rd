% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/single_evaluate.r
\name{single_evaluate}
\alias{single_evaluate}
\title{Evaluate SINGLE model}
\usage{
single_evaluate(
  bamfile,
  single_fits,
  ref_seq,
  pos_start = NULL,
  pos_end = NULL,
  gaps_weights,
  save = FALSE,
  output_file,
  verbose = FALSE
)
}
\arguments{
\item{bamfile}{File containing the counts per position returned by samtools mpileup}

\item{single_fits}{Results of the SINGLE model as returned by single_train(). It can be either the output data.frame or the saved file.}

\item{ref_seq}{DNAStringSet containing the true reference sequence}

\item{pos_start}{Numeric. Position to start analyzing, counting starts from 1 and it refers to reference used for minimap2 alignment.}

\item{pos_end}{Numeric. Position to stop analyzing, counting starts from 1 and it refers to reference used for minimap2 alignment.}

\item{gaps_weights}{One of "minimum","none","mean". How to assign qscores to deletions.}

\item{save}{Logical. Should data be saved in a output_file?}

\item{output_file}{File name for output, if save=TRUE.}

\item{verbose}{Logical}
}
\value{
Creates file output_prefix_corrected.txt with the Qscores re-scaled by SINGLE. Columns are SeqID position nucleotide isWT original_quality p_SINGLe
}
\description{
Main function to evaluate a gene library using a SINGLE model.
}
\details{
Before running single_evaluate_function you have to align your INPUT data to a REFERENCE using minimap2 and count the nucleotides per position using samtools using these lines:

\code{minimap2 -ax map-ont --sam-hit-only  REFERENCE.fasta INPUT.fastq >ALIGNMENT.sam}

\code{samtools view -S -b ALIGNMENT.sam > ALIGNMENT.bam}

\code{samtools sort ALIGNMENT.bam -o ALIGNMENT.sorted.bam }

\code{samtools mpileup -Q 0 ALIGNMENT.sorted.bam > COUNTS.txt}
}
\examples{
refseq_fasta <- system.file("extdata", "ref_seq.fasta", package = "single")
ref_seq <- Biostrings::subseq(Biostrings::readDNAStringSet(refseq_fasta), 1,10)
train_file <- system.file("extdata", "train_example.txt", package = "single")
train <- read.table(train_file, header=TRUE)
test_reads_example <- system.file("extdata", "test_sequences.sorted.bam",
   package = "single")
corrected_reads <- single_evaluate(bamfile = test_reads_example,
                 single_fits = train,ref_seq = ref_seq,
                 pos_start=1,pos_end=10,gaps_weights = "minimum")
corrected_reads
}
