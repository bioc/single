% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluate_fits.r
\name{evaluate_fits}
\alias{evaluate_fits}
\title{Evaluate SINGLE fits}
\usage{
evaluate_fits(
  pos_range,
  q_range,
  output_file,
  data_fits,
  ref_seq,
  verbose = FALSE,
  save = FALSE
)
}
\arguments{
\item{pos_range}{Numeric vector. Positions to evaluate.}

\item{q_range}{Numeric vector. QUAL to evaluate.}

\item{output_file}{File name for output, if save=TRUE.}

\item{data_fits}{Data.frame with columns position nucleotide slope intercept as the one returned by fit_logregr}

\item{ref_seq}{DNAStringSet containing the true reference sequence.}

\item{verbose}{Logical.}

\item{save}{Logical. Should results be saved in output_file?}
}
\value{
data.frame with SINGLE fits evaluated for pos_range and q_range.
}
\description{
Evaluates SINGLe for pos, nucleotides and QUAL in the given ranges.
}
\examples{
train_reads_example <- system.file("extdata","train_seqs_500.sorted.bam",
                                   package = "single")
refseq_fasta = system.file("extdata", "ref_seq.fasta", package = "single")
ref_seq = Biostrings::readDNAStringSet(refseq_fasta)
counts_pnq <- pileup_by_QUAL(bam_file=train_reads_example,
                 pos_start=1, pos_end=10)
p_prior_errors <- p_prior_errors(counts_pnq=counts_pnq)
p_prior_mutations <- p_prior_mutations(rates.matrix = mutation_rate,
                 mean.n.mut = 5,ref_seq = ref_seq)
fits <- fit_logregr(counts_pnq = counts_pnq,ref_seq=ref_seq,
                 p_prior_errors = p_prior_errors,
                 p_prior_mutations = p_prior_mutations)
pos_range = seq_len(100)
q_range = seq(1,50)
evaluated_fits <- evaluate_fits(pos_range = c(1,5),q_range = c(0,10),
                     data_fits = fits,ref_seq = ref_seq)
}
